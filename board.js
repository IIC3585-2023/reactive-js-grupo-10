const board = document.getElementById("pacman-board");

const GRID = [
    ["■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■"],
    ["■"," "," "," "," "," "," "," "," "," "," "," "," "," ","■"," "," "," "," "," "," "," "," "," "," "," ","■"," "," "," "," "," "," "," "," "," "," "," ","■"," "," "," "," "," "," "," "," "," "," "," "," "," ","■"],
    ["■"," "," "," "," "," "," "," "," "," "," "," "," "," ","■"," "," "," "," "," "," "," "," "," "," "," ","■"," "," "," "," "," "," "," "," "," "," "," ","■"," "," "," "," "," "," "," "," "," "," "," "," "," ","■"],
    ["■"," "," ","■","■","■"," "," ","■","■","■","■"," "," ","■"," "," ","■","■","■","■","■","■","■"," "," ","■"," "," ","■","■","■","■","■","■","■"," "," ","■"," "," ","■","■","■","■"," "," ","■","■","■"," "," ","■"],
    ["■"," "," ","■","■","■"," "," ","■","■","■","■"," "," ","■"," "," ","■","■","■","■","■","■","■"," "," ","■"," "," ","■","■","■","■","■","■","■"," "," ","■"," "," ","■","■","■","■"," "," ","■","■","■"," "," ","■"],
    ["■"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","■"],
    ["■"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","■"],
    ["■"," "," ","■","■","■"," "," ","■"," "," ","■","■","■","■","■","■","■"," "," ","■"," "," ","■","■","■","■","■","■","■"," "," ","■"," "," ","■","■","■","■","■","■","■"," "," ","■"," "," ","■","■","■"," "," ","■"],
    ["■"," "," "," "," "," "," "," ","■"," "," "," "," "," ","■"," "," "," "," "," ","■"," "," "," "," "," ","■"," "," "," "," "," ","■"," "," "," "," "," ","■"," "," "," "," "," ","■"," "," "," "," "," "," "," ","■"],
    ["■"," "," "," "," "," "," "," ","■"," "," "," "," "," ","■"," "," "," "," "," ","■"," "," "," "," "," ","■"," "," "," "," "," ","■"," "," "," "," "," ","■"," "," "," "," "," ","■"," "," "," "," "," "," "," ","■"],
    ["■","■","■","■","■","■"," "," ","■"," "," ","■"," "," ","■"," "," ","■","■","■","■","■","■","■"," "," ","■"," "," ","■","■","■","■","■","■","■"," "," ","■"," "," ","■"," "," ","■"," "," ","■","■","■","■","■","■"],
    ["■","■","■","■","■","■"," "," ","■"," "," ","■"," "," "," "," "," "," "," "," ","■"," "," "," "," "," "," "," "," "," "," "," ","■"," "," "," "," "," "," "," "," ","■"," "," ","■"," "," ","■","■","■","■","■","■"],
    ["■","■","■","■","■","■"," "," ","■"," "," ","■"," "," "," "," "," "," "," "," ","■"," "," "," "," "," "," "," "," "," "," "," ","■"," "," "," "," "," "," "," "," ","■"," "," ","■"," "," ","■","■","■","■","■","■"],
    ["■","■","■","■","■","■"," "," ","■"," "," ","■"," "," ","■","■","■","■"," "," ","■"," "," ","■","■"," "," "," ","■","■"," "," ","■"," "," ","■","■","■","■"," "," ","■"," "," ","■"," "," ","■","■","■","■","■","■"],
    ["■"," "," "," "," "," "," "," "," "," "," "," "," "," ","■"," "," "," "," "," "," "," "," ","■"," "," "," "," "," ","■"," "," "," "," "," "," "," "," ","■"," "," "," "," "," ","■"," "," "," "," "," "," "," ","■"],
    ["■"," "," "," "," "," "," "," "," "," "," "," "," "," ","■"," "," "," "," "," "," "," "," ","■"," "," "," "," "," ","■"," "," "," "," "," "," "," "," ","■"," "," "," "," "," ","■"," "," "," "," "," "," "," ","■"],
    ["■","■","■","■","■","■"," "," ","■"," "," ","■","■","■","■"," "," ","■","■","■","■"," "," ","■","■","■","■","■","■","■"," "," ","■","■","■","■"," "," ","■","■","■","■"," "," ","■"," "," ","■","■","■","■","■","■"],
    ["■","■","■","■","■","■"," "," ","■"," "," "," "," "," "," "," "," "," "," "," ","■"," "," "," "," "," "," "," "," "," "," "," ","■"," "," "," "," "," "," "," "," "," "," "," ","■"," "," ","■","■","■","■","■","■"],
    ["■","■","■","■","■","■"," "," ","■"," "," "," "," "," "," "," "," "," "," "," ","■"," "," "," "," "," "," "," "," "," "," "," ","■"," "," "," "," "," "," "," "," "," "," "," ","■"," "," ","■","■","■","■","■","■"],
    ["■","■","■","■","■","■"," "," ","■"," "," ","■","■","■","■","■","■","■"," "," ","■"," "," ","■","■","■","■","■","■","■"," "," ","■"," "," ","■","■","■","■","■","■","■"," "," ","■"," "," ","■","■","■","■","■","■"],
    ["■"," "," "," "," "," "," "," "," "," "," "," "," "," ","■"," "," "," "," "," "," "," "," "," "," "," ","■"," "," "," "," "," "," "," "," "," "," "," ","■"," "," "," "," "," "," "," "," "," "," "," "," "," ","■"],
    ["■"," "," "," "," "," "," "," "," "," "," "," "," "," ","■"," "," "," "," "," "," "," "," "," "," "," ","■"," "," "," "," "," "," "," "," "," "," "," ","■"," "," "," "," "," "," "," "," "," "," "," "," "," ","■"],
    ["■"," "," ","■","■","■"," "," ","■","■","■","■"," "," ","■"," "," ","■","■","■","■","■","■","■"," "," ","■"," "," ","■","■","■","■","■","■","■"," "," ","■"," "," ","■","■","■","■"," "," ","■","■","■"," "," ","■"],
    ["■"," "," "," "," ","■"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","■"," "," "," "," ","■"],
    ["■"," "," "," "," ","■"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","■"," "," "," "," ","■"],
    ["■","■","■"," "," ","■"," "," ","■"," "," ","■","■","■","■","■","■","■"," "," ","■"," "," ","■","■","■","■","■","■","■"," "," ","■"," "," ","■","■","■","■","■","■","■"," "," ","■"," "," ","■"," "," ","■","■","■"],
    ["■"," "," "," "," "," "," "," ","■"," "," "," "," "," ","■"," "," "," "," "," ","■"," "," "," "," "," ","■"," "," "," "," "," ","■"," "," "," "," "," ","■"," "," "," "," "," ","■"," "," "," "," "," "," "," ","■"],
    ["■"," "," "," "," "," "," "," ","■"," "," "," "," "," ","■"," "," "," "," "," ","■"," "," "," "," "," ","■"," "," "," "," "," ","■"," "," "," "," "," ","■"," "," "," "," "," ","■"," "," "," "," "," "," "," ","■"],
    ["■"," "," ","■","■","■","■","■","■","■","■","■"," "," ","■"," "," ","■","■","■","■","■","■","■"," "," ","■"," "," ","■","■","■","■","■","■","■"," "," ","■"," "," ","■","■","■","■","■","■","■","■","■"," "," ","■"],
    ["■"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","■"],
    ["■"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","■"],
    ["■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■","■"],
]

const CELL_SIZE = 25

board.width = CELL_SIZE * GRID[0].length
board.height = CELL_SIZE * GRID.length

const ctx = board.getContext("2d")

let walls = []

for(let row = 0; row < GRID.length; row++) {
    for(let col = 0; col < GRID[0].length; col++) {
        if (GRID[row][col] == "■") {
            walls.push([col, row])
        }
    }
}

function drawBoard() {
    for(let row = 0; row < GRID.length; row++) {
        for(let col = 0; col < GRID[0].length; col++) {
            if (GRID[row][col] == " ") {
                ctx.fillStyle = "#000000"
            } else {
                ctx.fillStyle = "#0000A6" //#000080 #0000CD
            }
            ctx.fillRect(col * CELL_SIZE, row * CELL_SIZE, CELL_SIZE, CELL_SIZE)
        }
    }
}
drawBoard()

// Basado en https://stackoverflow.com/a/16012490
function rectanglesIntersect(minAx, minAy, minBx, minBy) {
    let maxAx = minAx+1
    let maxAy = minAy+1
    let maxBx = minBx+2
    let maxBy = minBy+2
    let aLeftOfB = maxAx <= minBx;
    let aRightOfB = minAx >= maxBx;
    let aAboveB = minAy >= maxBy;
    let aBelowB = maxAy <= minBy;

    return !( aLeftOfB || aRightOfB || aAboveB || aBelowB );
}


function checkCollision(x, y) {
    let playerCol = (x / CELL_SIZE) - 1
    let playerRow = (y / CELL_SIZE) - 1
    console.log(playerCol, playerRow)
    for(let i = 0; i < walls.length; i++){
        let wall = walls[i]
        let wallCol = wall[0]
        let wallRow = wall[1]
        if (rectanglesIntersect(wallCol, wallRow, playerCol, playerRow)){
            return false
        }
    }

    return true
}